# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fSYNgbFqcVxAtHVzDeIk0k4JUGw4zij2
"""

import csv
import pandas as pd
import numpy as np

df = pd.read_csv('2019.csv')

print(df.info())
print(df.head())

"""# New Section"""

# Menghitung mean, median, dan modus untuk semua kolom kuantitatif
quantitative_columns = df.select_dtypes(include=['float64', 'int64']).columns

for col in quantitative_columns:
    print(f"Kolom: {col}")
    print(f"Mean: {df[col].mean()}")
    print(f"Median: {df[col].median()}")
    print(f"Modus: {df[col].mode().values[0]}")
    print()

# Menghitung rentang, varians, dan simpangan baku untuk 'score' dan 'generosity'
for col in ['Score', 'Generosity']:
    print(f"Kolom: {col}")
    print(f"Rentang: {df[col].max() - df[col].min()}")
    print(f"Varians: {df[col].var()}")
    print(f"Simpangan Baku: {df[col].std()}")
    print()

import matplotlib.pyplot as plt
import seaborn as sns

top_10 = df.nlargest(10, 'Score')
plt.figure(figsize=(10, 6))
plt.bar(top_10['Country or region'], top_10['Score'])
plt.xlabel('Negara')
plt.ylabel('Skor Kebahagiaan')
plt.title('10 Negara Terbahagia')
plt.xticks(rotation=45)
plt.show()

# Diagram lingkaran untuk rentang kebahagiaan
bins = [0, 4, 6, 8, 10]
labels = ['Rendah', 'Sedang', 'Tinggi', 'Sangat Tinggi']
df['Kategori'] = pd.cut(df['Score'], bins=bins, labels=labels)
kategori_counts = df['Kategori'].value_counts()

plt.figure(figsize=(8, 8))
plt.pie(kategori_counts, labels=kategori_counts.index, autopct='%1.1f%%')
plt.title('Proporsi Negara Berdasarkan Rentang Kebahagiaan')
plt.show()

# Histogram untuk nilai kebahagiaan
plt.figure(figsize=(10, 6))
plt.hist(df['Score'], bins=20, edgecolor='black')
plt.xlabel('Skor Kebahagiaan')
plt.ylabel('Frekuensi')
plt.title('Histogram Nilai Kebahagiaan')
plt.show()

# Box-plot untuk 'score' dan 'generosity'
plt.figure(figsize=(10, 6))
sns.boxplot(data=df[['Score', 'Generosity']])
plt.title('Box-plot untuk Score dan Generosity')
plt.show()

# Scatter-plot antara 'score' dan 'generosity'
plt.figure(figsize=(10, 6))
plt.scatter(df['Score'], df['Generosity'])
plt.xlabel('Skor Kebahagiaan')
plt.ylabel('Generosity')
plt.title('Scatter-plot antara Score dan Generosity')
plt.show()

# Scatter-plot antara 'score' dan 'social support'
plt.figure(figsize=(10, 6))
plt.scatter(df['Score'], df['Social support'])
plt.xlabel('Skor Kebahagiaan')
plt.ylabel('Social Support')
plt.title('Scatter-plot antara Score dan Social Support')
plt.show()

# Mendeteksi outlier menggunakan IQR
def detect_outliers(column):
    Q1 = column.quantile(0.25)
    Q3 = column.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    outliers = column[(column < lower_bound) | (column > upper_bound)]
    return outliers

for col in ['Score', 'Generosity']:
    outliers = detect_outliers(df[col])
    print(f"Outlier pada kolom {col}: {len(outliers)}")
    print(outliers)
    print()